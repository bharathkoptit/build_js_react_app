version: 2.1

executors:
  default:
    docker:
      - image: circleci/python:3.8

jobs:
  setup:
    executor: default
    steps:
      - checkout
      - run:
          name: Install Java and other packages
          command: |
            sudo apt-get update
            sudo apt-get install -y unzip wget openjdk-11-jdk
      - run:
          name: Set JAVA_HOME
          command: |
            echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> $BASH_ENV
            echo 'export PATH=$JAVA_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install Groovy
          command: |
            wget https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-5.0.0-alpha-9.zip -O groovy.zip
            sudo unzip groovy.zip -d /opt
            sudo ln -sf /opt/groovy-5.0.0-alpha-9/bin/groovy /usr/local/bin/groovy
            sudo chmod +x /opt/groovy-5.0.0-alpha-9/bin/groovy
      - run:
          name: Set GROOVY_HOME
          command: |
            echo 'export GROOVY_HOME=/opt/groovy-5.0.0-alpha-9' >> $BASH_ENV
            echo 'export PATH=$GROOVY_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Verify Groovy Installation
          command: |
            groovy --version || /opt/groovy-5.0.0-alpha-9/bin/groovy --version
      - run:
          name: Install Node.js and npm
          command: |
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node --version
            npm --version
      - run:
          name: List Project Files
          command: |
            echo "Listing contents of ~/project:"
            ls -R ~/project
      - run:
          name: Check Script Existence
          command: |
            cd ~/project
            if [ -f "Jenkins/shared-libraries/src/org/common/build/BuildWithNpm.groovy" ]; then
              echo "BuildWithNpm.groovy exists."
            else
              echo "BuildWithNpm.groovy does not exist."
              exit 1
            fi
      - run:
          name: Load and Execute Groovy Scripts
          command: |
            cd ~/project
            baseDir="Jenkins/shared-libraries"
            # Function to load and execute a Groovy script
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              echo "Looking for script at ${scriptPath}"
              if [ -f "${scriptPath}" ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            # Load and execute required scripts from 'vars' directory
            loadAndExecuteGroovyScript "vars/common/scm-util" "git" "GitCheckout"
            loadAndExecuteGroovyScript "vars/common" "codeAnalysis" "PerformSonarAnalysisForReactjs"
            loadAndExecuteGroovyScript "vars/common" "dockerUtil" "DockerUtil"
            loadAndExecuteGroovyScript "vars/common" "containerPublish" "DockerHubPublish"
            loadAndExecuteGroovyScript "vars/common" "dockerUtil" "DockerScan"
            # Load and execute required scripts from 'src' directory
            loadAndExecuteGroovyScript "src/org/common" "build" "BuildWithNpm"
            loadAndExecuteGroovyScript "src/org/common" "unitTest" "UnitTestWithNpm"

  build:
    executor: default
    steps:
      - checkout
      - run:
          name: Build App
          command: |
            cd ~/project
            groovy Jenkins/shared-libraries/src/org/common/build/BuildWithNpm.groovy

  test:
    executor: default
    steps:
      - checkout
      - run:
          name: Run Tests
          command: |
            cd ~/project
            groovy Jenkins/shared-libraries/src/org/common/unitTest/UnitTestWithNpm.groovy

  sonar:
    executor: default
    steps:
      - checkout
      - run:
          name: Install SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip sonar-scanner-cli-4.6.2.2472-linux.zip
            sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
            sudo ln -sf /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Set SonarQube Environment Variables
          command: |
            echo 'export SONAR_SCANNER_HOME=/opt/sonar-scanner' >> $BASH_ENV
            echo 'export PATH=$SONAR_SCANNER_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Verify SonarQube Scanner Installation
          command: |
            sonar-scanner --version || /opt/sonar-scanner/bin/sonar-scanner --version
            groovy Jenkins/shared-libraries/vars/common/codeAnalysis/PerformSonarAnalysisForReactjs.groovy

  docker_build:
    executor: default
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build Docker Image
          command: |
            cd ~/project
            groovy Jenkins/shared-libraries/vars/common/dockerUtil/DockerUtil.groovy

  docker_scan:
    executor: default
    steps:
      - checkout
      - run:
          name: Install Trivy
          command: |
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy
      - run:
          name: Scan Docker Image
          command: |
            cd ~/project
            groovy Jenkins/shared-libraries/vars/common/dockerUtil/DockerScan.groovy

workflows:
  version: 2
  build_and_test:
    jobs:
      - setup
      - build:
          requires:
            - setup
      - test:
          requires:
            - build
      - sonar:
          requires:
            - test
      - docker_build:
          requires:
            - sonar
      - docker_scan:
          requires:
            - docker_build
