version: 2.1

executors:
  default:
    docker:
      - image: circleci/python:3.8

jobs:
  setup:
    executor: default
    steps:
      - checkout

      # Install required packages
      - run:
          name: Install Java and other packages
          command: |
            sudo apt-get update
            sudo apt-get install -y unzip wget openjdk-11-jdk

      # Set JAVA_HOME environment variable test
      - run:
          name: Set JAVA_HOME
          command: |
            echo 'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64' >> $BASH_ENV
            echo 'export PATH=$JAVA_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      # Install Groovy
      - run:
          name: Install Groovy
          command: |
            wget https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-5.0.0-alpha-9.zip -O groovy.zip
            sudo unzip groovy.zip -d /opt
            sudo ln -sf /opt/groovy-5.0.0-alpha-9/bin/groovy /usr/local/bin/groovy
            sudo chmod +x /opt/groovy-5.0.0-alpha-9/bin/groovy

      # Set GROOVY_HOME and update PATH environment variable
      - run:
          name: Set GROOVY_HOME
          command: |
            echo 'export GROOVY_HOME=/opt/groovy-5.0.0-alpha-9' >> $BASH_ENV
            echo 'export PATH=$GROOVY_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      # Verify Groovy installation
      - run:
          name: Verify Groovy Installation
          command: |
            groovy --version || /opt/groovy-5.0.0-alpha-9/bin/groovy --version

      # Install Node.js and npm
      - run:
          name: Install Node.js and npm
          command: |
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node --version
            npm --version

      # Debugging: List contents of project directory
      - run:
          name: List Project Files
          command: |
            echo "Listing contents of ~/project:"
            ls -R ~/project

      # Check script existence
      - run:
          name: Check Script Existence
          command: |
            cd ~/project
            if [ -f "Jenkins/shared-libraries/src/org/common/build/BuildWithNpm.groovy" ]; then
              echo "BuildWithNpm.groovy exists."
            else
              echo "BuildWithNpm.groovy does not exist."
              exit 1
            fi

      # Define baseDir for the project and execute scripts
      - run:
          name: Load and Execute Groovy Scripts
          command: |
            cd ~/project
            baseDir="Jenkins/shared-libraries/src/org/common/build"
      
            # Function to load and execute a Groovy script
            loadAndExecuteGroovyScript() {
              scriptName=$1
              scriptPath="${baseDir}/${scriptName}.groovy"
              echo "Looking for script at ${scriptPath}"
              if [ -f "${scriptPath}" ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
      
            # Load and execute required scripts
            loadAndExecuteGroovyScript "BuildWithNpm"

      # Install dependencies and build React app
      - run:
          name: Build App
          command: |
            cd ~/project
            groovy Jenkins/shared-libraries/src/org/common/build/BuildWithNpm.groovy

      # Optionally, run tests or other commands
      - run:
          name: Run Tests
          command: |
            cd ~/project
            groovy Jenkins/shared-libraries/src/org/common/unitTest/UnitTestWithNpm.groovy

      # Install SonarQube Scanner
      - run:
          name: Install SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip sonar-scanner-cli-4.6.2.2472-linux.zip
            sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
            sudo ln -sf /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      # Set SonarQube environment variables
      - run:
          name: Set SonarQube Environment Variables
          command: |
            echo 'export SONAR_SCANNER_HOME=/opt/sonar-scanner' >> $BASH_ENV
            echo 'export PATH=$SONAR_SCANNER_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      # Verify SonarQube Scanner installation
      - run:
          name: Verify SonarQube Scanner Installation
          command: |
            sonar-scanner --version || /opt/sonar-scanner/bin/sonar-scanner --version

workflows:
  version: 2
  build:
    jobs:
      - setup till here it is working now install sonarqube and setpath ref this jenkins pipeline@Library('shared-libraries') _

pipeline {
    agent any
    
    parameters {
    
        string(name: 'GIT_SOURCE_CODE_URL', description: 'Git repository URL for source code')
        string(name: 'SOURCE_CODE_BRANCH_NAME', description: 'Source Code Branch to build')
        credentials(name: 'GIT_SOURCE_CODE_CREDENTIAL', description: 'Jenkins credential for source code Git repo', required: true)
        string(name: 'DOCKER_REPO', description: 'Docker repository')
        string(name: 'DOCKER_IMAGE_NAME', description: 'Docker image name')
        string(name: 'DOCKER_IMAGE_TAG', description: 'Docker image tag')
        credentials(name: 'DOCKER_CREDENTIAL', description: 'Jenkins credential for DockerHub', required: true)
        string(name: 'SONAR_PROJECT_KEY', description: 'SonarQube project key')
        string(name: 'SONAR_ORGANIZATION', description: 'SonarQube organization key')
        string(name: 'SONAR_SOURCES_DIR', description: 'Source code directory for SonarQube analysis')
        credentials(name: 'SONAR_TOKEN', description: 'SonarQube authentication token', required: true)
       
    }

    stages {
        stage('Load Scripts') {
            steps {
                script {
                    // Define baseDir for Jenkins shared libraries
                    def baseDir = "${env.WORKSPACE}/Jenkins/shared-libraries"

                    // Load scripts using dynamically constructed paths
                    def loadScript = { type, technology, scriptName ->
                        def scriptPath = "${baseDir}/${type}/${technology}/${scriptName}.groovy"
                        return load(scriptPath)
                    }

                    // Load scripts from 'vars' directory
                    gitCheckoutScript = loadScript('vars/common/scm-util', 'git', 'GitCheckout')
                    sonarScript = loadScript('vars/common', 'codeAnalysis', 'PerformSonarAnalysisForReactjs')
                    dockerBuildScript = loadScript('vars/common', 'dockerUtil', 'DockerUtil')
                    dockerPublishScript = loadScript('vars/common', 'containerPublish', 'DockerHubPublish')
                    dockerScanScript = loadScript('vars/common', 'dockerUtil', 'DockerScan')
                    // Load scripts from 'src' directory
                    buildWithNpmScript = loadScript('src/org/common', 'build', 'BuildWithNpm')
                    unitTestWithNpmScript = loadScript('src/org/common', 'unitTest', 'UnitTestWithNpm')
                
                }
            }
        }

        stage('Git Checkout Source Code Repo') {
            steps {
                script {
                    gitCheckoutScript.gitCheckout(params.SOURCE_CODE_BRANCH_NAME, params.GIT_SOURCE_CODE_URL, params.GIT_SOURCE_CODE_CREDENTIAL)
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Example usage of loaded build script
                    buildWithNpmScript.build()
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    // Example usage of loaded test script
                    unitTestWithNpmScript.unitTest()
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    sonarScript.performSonarCloudAnalysis(
                        params.SONAR_PROJECT_KEY, 
                        params.SONAR_ORGANIZATION, 
                        params.SONAR_SOURCES_DIR, 
                        params.SONAR_TOKEN
                    )
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dockerBuildScript.dockerBuild(params.DOCKER_IMAGE_NAME, params.DOCKER_IMAGE_TAG)
                }
            }
        }

         stage('Docker Scan') {
            steps {
                script {
                    dockerScanScript.dockerScan(params.DOCKER_IMAGE_NAME)
                }
            }
        }

        stage('Docker Publish') {
            steps {
                script {
                    dockerPublishScript.dockerPublish(params.DOCKER_REPO, params.DOCKER_IMAGE_NAME, params.DOCKER_IMAGE_TAG, params.DOCKER_CREDENTIAL)
                }
            }
        }

    }

}
