version: 2.1

executors:
  default:
    docker:
      - image: circleci/python:3.8

jobs:
  git_checkout:
    executor: default
    steps:
      - checkout

      - run:
          name: Install Java and other packages
          command: |
            sudo apt-get update
            sudo apt-get install -y unzip wget openjdk-11-jdk

      - run:
          name: Install Groovy
          command: |
            wget https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-5.0.0-alpha-9.zip -O groovy.zip
            sudo unzip groovy.zip -d /opt
            sudo ln -sf /opt/groovy-5.0.0-alpha-9/bin/groovy /usr/local/bin/groovy
            sudo chmod +x /opt/groovy-5.0.0-alpha-9/bin/groovy

      - run:
          name: Set GROOVY_HOME and PATH
          command: |
            echo 'export GROOVY_HOME=/opt/groovy-5.0.0-alpha-9' >> $BASH_ENV
            echo 'export PATH=$GROOVY_HOME/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Verify Groovy Installation
          command: |
            groovy --version || /opt/groovy-5.0.0-alpha-9/bin/groovy --version

      - run:
          name: Install Node.js and npm
          command: |
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node --version
            npm --version

      - run:
          name: Run Build Script
          command: |
            groovy Jenkins/shared-libraries/src/org/common/build/BuildWithNpm.groovy

      - run:
          name: Run Test Script
          command: |
            groovy Jenkins/shared-libraries/src/org/common/unitTest/UnitTestWithNpm.groovy

      - run:
          name: Install SonarScanner
          command: |
            #!/bin/bash -eo pipefail
            
            # Define SonarScanner version and download URL
            SONAR_SCANNER_VERSION="4.6.2.2472"
            SONAR_SCANNER_URL="https://sonarcloud.io/static/cpp/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
            SONAR_SCANNER_DIR="/opt/sonar-scanner/sonar-scanner-${SONAR_SCANNER_VERSION}-linux"
            SONAR_SCANNER_BIN="/usr/local/bin/sonar-scanner"
            
            # Download SonarScanner ZIP
            echo "Downloading SonarScanner..."
            wget -qO /tmp/sonar-scanner.zip "$SONAR_SCANNER_URL"
            if [ $? -ne 0 ]; then
                echo "Failed to download SonarScanner."
                exit 1
            fi
            
            # Create directory for SonarScanner
            echo "Creating directory for SonarScanner..."
            sudo mkdir -p /opt/sonar-scanner
            if [ $? -ne 0 ]; then
                echo "Failed to create directory /opt/sonar-scanner."
                exit 1
            fi
            
            # Unzip SonarScanner
            echo "Unzipping SonarScanner..."
            sudo unzip /tmp/sonar-scanner.zip -d /opt/sonar-scanner
            if [ $? -ne 0 ]; then
                echo "Failed to unzip SonarScanner."
                exit 1
            fi
            
            # Create symbolic link to SonarScanner executable
            echo "Creating symbolic link..."
            sudo ln -sf "$SONAR_SCANNER_DIR/bin/sonar-scanner" "$SONAR_SCANNER_BIN"
            if [ $? -ne 0 ]; then
                echo "Failed to create symbolic link."
                exit 1
            fi
            
            # Ensure SonarScanner is executable
            echo "Setting permissions..."
            sudo chmod +x "$SONAR_SCANNER_BIN"
            if [ $? -ne 0 ]; then
                echo "Failed to set permissions for SonarScanner."
                exit 1
            fi
            
            # Add SonarScanner to PATH
            echo "Updating PATH..."
            echo 'export PATH=$PATH:/opt/sonar-scanner/sonar-scanner-4.6.2.2472-linux/bin' >> $BASH_ENV
            if [ $? -ne 0 ]; then
                echo "Failed to update PATH in $BASH_ENV."
                exit 1
            fi
            
            # Source updated environment variables
            source $BASH_ENV
            if [ $? -ne 0 ]; then
                echo "Failed to source $BASH_ENV."
                exit 1
            fi
            
            # Verify installation
            echo "Verifying SonarScanner installation..."
            sonar-scanner --version
            if [ $? -ne 0 ]; then
                echo "SonarScanner installation verification failed."
                exit 1
            fi
            
            echo "SonarScanner installation completed successfully."


      - run:
          name: Run SonarScanner
          command: |
            sonar-scanner \
              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
              -Dsonar.organization=${SONAR_ORGANIZATION} \
              -Dsonar.sources=${SONAR_SOURCES_DIR} \
              -Dsonar.java.binaries=${SONAR_BINARIES_DIR} \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${SONAR_TOKEN} \
              > sonar-scanner.log 2>&1 || {
                echo "SonarScanner failed with exit code $?. See sonar-scanner.log for details."
                cat sonar-scanner.log
                exit 1
              }

      - setup_remote_docker:
          version: 20.10.7

      - run:
          name: Build Docker Image
          command: |
            groovy Jenkins/shared-libraries/vars/common/dockerUtil/DockerUtil.groovy

      - run:
          name: Scan Docker Image
          command: |
            groovy Jenkins/shared-libraries/vars/common/dockerUtil/DockerScan.groovy

      - run:
          name: Publish Docker Image
          command: |
            groovy Jenkins/shared-libraries/vars/common/containerPublish/DockerHubPublish.groovy

workflows:
  version: 2
  build:
    jobs:
      - git_checkout
