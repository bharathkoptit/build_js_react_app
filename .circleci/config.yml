version: 2.1

executors:
  java-executor:
    docker:
      - image: circleci/openjdk:11-jdk
    environment:
      JAVA_HOME: /usr/local/openjdk-11
      GROOVY_HOME: /usr/local/groovy
      PATH: /usr/local/groovy/bin:/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    working_directory: /home/circleci/project

jobs:
  install_groovy:
    executor: java-executor
    steps:
      - checkout
      - run:
          name: Install Groovy
          command: |
            wget https://archive.apache.org/dist/groovy/4.0.11/distribution/apache-groovy-sdk-4.0.11.zip
            unzip apache-groovy-sdk-4.0.11.zip
            sudo mv groovy-4.0.11 /usr/local/groovy
            export PATH=$PATH:/usr/local/groovy/bin
            groovy --version  # Check if Groovy is installed correctly

  load_scripts:
    parameters:
      baseDir:
        type: string
        default: "Jenkins/shared-libraries"
    executor: java-executor
    steps:
      - checkout
      - run:
          name: Load Scripts
          command: |
            export PATH=$PATH:/usr/local/groovy/bin

            # Debugging: Show current working directory
            echo "Current working directory: $(pwd)"

            # Debugging: List contents of current working directory
            echo "Contents of current working directory:"
            ls -R

            # Directly use the baseDir provided
            baseDir="${CIRCLE_JOB_PARAMETERS_BASEDIR:-Jenkins/shared-libraries}"
            echo "Base directory: ${baseDir}"
            
            # Debugging: List contents of base directory
            echo "Contents of base directory:"
            ls -R "${baseDir}" || echo "Base directory does not exist"

            loadScript() {
              scriptPath="${baseDir}/${1}.groovy"
              echo "Loading script: ${scriptPath}"  # Debugging line
              if [ -f "${scriptPath}" ]; then
                cat "${scriptPath}"
              else
                echo "Script not found: ${scriptPath}"
                exit 1
              fi
            }

            gitCheckoutScript=$(loadScript "vars/common/scm-util/git/GitCheckout")
            sonarScript=$(loadScript "vars/common/codeAnalysis/PerformSonarAnalysisForReactjs")
            dockerBuildScript=$(loadScript "vars/common/dockerUtil/DockerUtil")
            dockerPublishScript=$(loadScript "vars/common/containerPublish/DockerHubPublish")
            dockerScanScript=$(loadScript "vars/common/dockerUtil/DockerScan")
            buildWithNpmScript=$(loadScript "vars/common/build/BuildWithNpm")
            unitTestWithNpmScript=$(loadScript "vars/common/uniTest/unitTestWithNpm")

            echo "${gitCheckoutScript}" > gitCheckoutScript.groovy
            echo "${sonarScript}" > sonarScript.groovy
            echo "${dockerBuildScript}" > dockerBuildScript.groovy
            echo "${dockerPublishScript}" > dockerPublishScript.groovy
            echo "${dockerScanScript}" > dockerScanScript.groovy
            echo "${buildWithNpmScript}" > buildWithNpmScript.groovy
            echo "${unitTestWithNpmScript}" > unitTestWithNpmScript.groovy

  install_dependencies:
    executor: java-executor
    steps:
      - run:
          name: Install Dependencies
          command: npm install

  build:
    executor: java-executor
    steps:
      - run:
          name: Build
          command: |
            export PATH=$PATH:/usr/local/groovy/bin
            groovy -e "new GroovyShell().evaluate(new File('buildWithNpmScript.groovy'))"

  test:
    executor: java-executor
    steps:
      - run:
          name: Unit Test
          command: |
            export PATH=$PATH:/usr/local/groovy/bin
            groovy -e "new GroovyShell().evaluate(new File('unitTestWithNpmScript.groovy'))"

  sonar_analysis:
    executor: java-executor
    steps:
      - run:
          name: SonarQube Analysis
          command: |
            export PATH=$PATH:/usr/local/groovy/bin
            groovy -e "new GroovyShell().evaluate(new File('sonarScript.groovy'))"

  docker_build:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Docker Build
          command: |
            export PATH=$PATH:/usr/local/groovy/bin
            groovy -e "new GroovyShell().evaluate(new File('dockerBuildScript.groovy'))"

  docker_scan:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Docker Scan
          command: |
            export PATH=$PATH:/usr/local/groovy/bin
            groovy -e "new GroovyShell().evaluate(new File('dockerScanScript.groovy'))"

  docker_publish:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Docker Publish
          command: |
            export PATH=$PATH:/usr/local/groovy/bin
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            groovy -e "new GroovyShell().evaluate(new File('dockerPublishScript.groovy'))"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_groovy
      - load_scripts:
          baseDir: "Jenkins/shared-libraries"
          requires:
            - install_groovy
      - install_dependencies:
          requires:
            - load_scripts
      - build:
          requires:
            - install_dependencies
      - test:
          requires:
            - build
      - sonar_analysis:
          requires:
            - test
      - docker_build:
          requires:
            - sonar_analysis
      - docker_scan:
          requires:
            - docker_build
      - docker_publish:
          requires:
            - docker_scan
