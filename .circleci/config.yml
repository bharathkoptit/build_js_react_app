version: 2.1

executors:
  node-executor:
    docker:
      - image: circleci/node:16  # Update Node.js version as needed

jobs:
  setup:
    executor: node-executor
    parameters:
      GIT_SOURCE_CODE_URL:
        type: string
        default: "https://github.com/bharathkoptit/build_js_react_app.git"
      SOURCE_CODE_BRANCH_NAME:
        type: string
        default: "master"
      # Add other parameters here if needed
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Print Parameters
          command: |
            echo "GIT_SOURCE_CODE_URL: << parameters.GIT_SOURCE_CODE_URL >>"
            echo "SOURCE_CODE_BRANCH_NAME: << parameters.SOURCE_CODE_BRANCH_NAME >>"

      - run:
          name: Prepare Directory
          command: |
            if [ -d ~/project ]; then
              rm -rf ~/project
            fi
            mkdir -p ~/project

      - run:
          name: Checkout Repository
          command: |
            git clone << parameters.GIT_SOURCE_CODE_URL >> ~/project
            cd ~/project
            if git show-ref --verify --quiet refs/heads/<< parameters.SOURCE_CODE_BRANCH_NAME >>; then
              git checkout << parameters.SOURCE_CODE_BRANCH_NAME >>
            else
              echo "Branch '<< parameters.SOURCE_CODE_BRANCH_NAME >>' not found. Available branches:"
              git branch -r
              exit 1
            fi

      - run:
          name: Install Node.js Dependencies
          command: |
            cd ~/project
            npm install

      - run:
          name: Check Docker Installation
          command: |
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg-agent \
                software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository \
                "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) \
                stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            else
              echo "Docker is already installed"
            fi

      - run:
          name: Check Groovy Installation
          command: |
            if ! command -v groovy &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y groovy
            else
              echo "Groovy is already installed"
            fi

  build:
    executor: node-executor
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Load and Execute Build Script
          command: |
            cd ~/project
            # Define baseDir for the project
            baseDir="${PWD}/Jenkins/shared-libraries"
            
            # Function to load and execute a Groovy script
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              if [ -f ${scriptPath} ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            
            # Load and execute build script
            loadAndExecuteGroovyScript "src/org/common" "build" "BuildWithNpm"

  unit_test:
    executor: node-executor
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Load and Execute Unit Test Script
          command: |
            cd ~/project
            baseDir="${PWD}/Jenkins/shared-libraries"
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              if [ -f ${scriptPath} ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            loadAndExecuteGroovyScript "src/org/common" "unitTest" "UnitTestWithNpm"

  sonar_analysis:
    executor: node-executor
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Load and Execute SonarQube Script
          command: |
            cd ~/project
            baseDir="${PWD}/Jenkins/shared-libraries"
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              if [ -f ${scriptPath} ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            loadAndExecuteGroovyScript "vars/common" "codeAnalysis" "PerformSonarAnalysisForReactjs"

  docker_build:
    executor: node-executor
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Load and Execute Docker Build Script
          command: |
            cd ~/project
            baseDir="${PWD}/Jenkins/shared-libraries"
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              if [ -f ${scriptPath} ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            loadAndExecuteGroovyScript "vars/common" "dockerUtil" "DockerUtil"

  docker_scan:
    executor: node-executor
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Load and Execute Docker Scan Script
          command: |
            cd ~/project
            baseDir="${PWD}/Jenkins/shared-libraries"
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              if [ -f ${scriptPath} ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            loadAndExecuteGroovyScript "vars/common" "dockerUtil" "DockerScan"

  docker_publish:
    executor: node-executor
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Load and Execute Docker Publish Script
          command: |
            cd ~/project
            baseDir="${PWD}/Jenkins/shared-libraries"
            loadAndExecuteGroovyScript() {
              type=$1
              technology=$2
              scriptName=$3
              scriptPath="${baseDir}/${type}/${technology}/${scriptName}.groovy"
              if [ -f ${scriptPath} ]; then
                echo "Executing ${scriptPath}"
                groovy ${scriptPath}
              else
                echo "Script ${scriptPath} not found!"
                exit 1
              fi
            }
            loadAndExecuteGroovyScript "vars/common" "containerPublish" "DockerHubPublish"

workflows:
  version: 2
  setup_and_load:
    jobs:
      - setup
      - build:
          requires:
            - setup
      - unit_test:
          requires:
            - build
      - sonar_analysis:
          requires:
            - unit_test
      - docker_build:
          requires:
            - sonar_analysis
      - docker_scan:
          requires:
            - docker_build
      - docker_publish:
          requires:
            - docker_scan
